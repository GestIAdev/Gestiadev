<svg width="1600" height="900" viewBox="0 0 1600 900" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <filter id="glow">
      <feGaussianBlur stdDeviation="1" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  <rect width="100%" height="100%" fill="#0A0A1A" />
  
  <script>
    <![CDATA[
      const svgNS = "http://www.w3.org/2000/svg";
      const container = document.getElementById("point-container");

      // Definimos nuestras esferas (centro x, centro y, radio, densidad de puntos)
      const spheres = [
        { cx: 950, cy: 450, r: 350, density: 400 },
        { cx: 400, cy: 250, r: 200, density: 200 },
        { cx: 1300, cy: 180, r: 150, density: 100 },
        { cx: 200, cy: 650, r: 250, density: 150 }
      ];

      spheres.forEach(sphere => {
        for (let i = 0; i < sphere.density; i++) {
          // Generamos puntos con una distribución gaussiana para que se concentren en el centro
          let angle = Math.random() * 2 * Math.PI;
          let dist = Math.abs(gaussianRandom()) * sphere.r;
          if (dist > sphere.r) continue; // Nos aseguramos de que no se salgan

          let x = sphere.cx + dist * Math.cos(angle);
          let y = sphere.cy + dist * Math.sin(angle);
          
          let opacity = (1 - (dist / sphere.r)) * 0.8 + 0.1; // Más opaco en el centro
          let radius = (1 - (dist / sphere.r)) * 1.2 + 0.5; // Más grande en el centro
          let color = Math.random() < 0.2 ? "#00F2A9" : "#EAEAEA"; // 20% de puntos de color

          const circle = document.createElementNS(svgNS, 'circle');
          circle.setAttribute('cx', x);
          circle.setAttribute('cy', y);
          circle.setAttribute('r', radius);
          circle.setAttribute('fill', color);
          circle.setAttribute('fill-opacity', opacity);

          if (color === "#00F2A9" && radius > 1.5) {
             circle.setAttribute('filter', 'url(#glow)');
          }
          
          container.appendChild(circle);
        }
      });

      // Función para generar números aleatorios con distribución normal (Gaussiana)
      function gaussianRandom() {
        let u = 0, v = 0;
        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)
        while(v === 0) v = Math.random();
        return Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );
      }
    ]]>
  </script>
  
  <g id="point-container" />
</svg>